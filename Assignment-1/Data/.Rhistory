library(lubridate)
library(parallel)
detectCores()
numcores = detectCores()
cl = makeCluster(numcores)
clusterEvalQ(cl,
library(dplyr)
library(data.table)
library(lubridate)
library(parallel))
clusterEvalQ(cl,install.packages("dplR"))
clusterEvalQ(cl,install.packages("dplyr"))
stopCluster(cl)
numcores = detectCores()
cl = makeCluster(numcores)
clusterEvalQ(cl, 2 + 2)
library(lubridate)
clusterEvalQ(cl, {
library(dplyr)
library(data.table)
library(lubridate)
})
stopCluster(cl)
nyse = c(.05, .15, -.08, .12, -.05)
anaDone = c(.1, .05, -.05, .2, .05)
?lm
regression = lm(anadone ~ nyse)
regression = lm(anaDone ~ nyse)
regression$coefficients
getwd()
A = matrix(c(1,1,1,3,2,1), nrow = 3, ncol = 2, byrow = FALSE)
View(A)
Aprime = t(A)
View(Aprime)
b = c(1.5, 0.5, 0)
inv(A%*%Aprime)%*%Aprime%*%b
library(matlib)
install.packages(matlib)
install.packages("matlib")
library(matlib)
inv(A%*%Aprime)%*%Aprime%*%b
inver = inv(A%*%Aprime)
c = A%*%Aprime
View(c)
c = Aprime%*%A
c = inv(c)
b = Aprime %*% b
c %*% b
View(b)
View(c)
a = matrix(c(1, 3, 1.5, 2, 1, 2, 0.5, 1, 1, 1, 0, 0), nrow = 3, ncol = 4, byrow = TRUE)
View(a)
aprime = t(a)
library(matlib)
inv(a %*% aprime)
a %*% aprime
a = matrix(c(2,1,0,3,1,1,1,1,2,1,0,1,2,1,0), nrow = 3, ncol = 5, byrow = T)
aprime = t(a)
s = c(1,1,1,2,1/3)
inv(a %*% aprime) %*% a %*% s
inv(matrix(c(4,2,4,2,2,2,0,2,4), nrow = 3, ncol = 3, byrow = T))
library(matlib)
a = matrix(c(2, 0, 1, 1, 0, 2), nrow = 3, ncol = 2, byrow = T)
View(a)
aprime = t(a)
View(aprime)
a %*% aprime
install.packages('IRkernel')
update.packages()
IRkernel::installspec(user = FALSE)
# Join matching data based on the quarter and year dates
tbillq = left_join(tbillq, crspq, by = 'quarter')
library(ggplot2)
library(dplyr)
library(zoo)
library(lubridate)
library(plotly)
library(ts)
library(shiny)
library(PerformanceAnalytics)
setwd("C:\\Users\\austi\\Documents\\Github_Repos\\Macro_Finance\\Assignment-1\\Data")
crsp = read.csv('crsp_monthly.csv')
tbilla = read.csv('TBill_Annual.csv')
tbillq = read.csv('TBill_Quarterly.csv')
#Fix dates and setup data
##################################
colnames(crsp)[1] <- "date"
colnames(tbilla)[1] <- "date"
colnames(tbillq)[1] <- "date"
crsp$date = ymd(crsp$date)
tbilla$date = ymd(tbilla$date)
tbillq$date = ymd(tbillq$date)
tbilla$year = year(tbilla$date)
tbillq$quarter = as.Date(as.yearqtr(tbillq$date))
crsp$quarter = as.Date(as.yearqtr(crsp$date))
crsp$year = year(crsp$date)
#################################
# Generate Dividend returns
crsp['div'] = crsp$vwretd - crsp$vwretx
# Check to see if Div returns are all positive
filter(crsp, div < 0)
# Plot initial monthly dividends
#plot_ly(crsp, x = ~date, y = ~div, type = "scatter", mode = 'lines')
# Generate quarterly geometric cumulative sum
crspq = crsp %>%
group_by(quarter) %>%
summarise(vwretx = Return.cumulative(vwretx, geometric = TRUE),
vwretd = Return.cumulative(vwretd, geometric = TRUE),
div = Return.cumulative(div, geometric = TRUE))
# Generate yearlt geometric cumulative sums
crspa = crsp %>%
group_by(year) %>%
summarise(vwretx = Return.cumulative(vwretx, geometric = TRUE),
vwretd = Return.cumulative(vwretd, geometric = TRUE),
div = Return.cumulative(div, geometric = TRUE))
# Join matching data based on the quarter and year dates
tbillq = left_join(tbillq, crspq, by = 'quarter')
tbilla = left_join(tbilla, crspa, by = 'year')
# Calculate the excess dividend inclusive index return
tbillq$excessRetd = tbillq$vwretd - tbillq$t90ret
tbilla$excessRetd = tbilla$vwretd - tbilla$b1ret
# Plot the dividend returns quarterly and yearly
#plot_ly(crspq, x = ~quarter, y = ~div, type = "scatter", mode = 'lines')
#plot_ly(crspa, x = ~yearly, y = ~div, type = "scatter", mode = 'lines')
View(tbillq)
View(tbillq)
# Convert Simple returns (calculated by CRSP) to Log Returns: r = log(R + 1)
tbillq$logExcessRetd = log(tbillq$vwretd + 1) - log(tbillq$t90ret + 1)
tbilla$logExcessRetd = log(tbilla$vwretd + 1) - log(tbilla$b1ret + 1)
# Convert Simple returns (calculated by CRSP) to Log Returns: r = log(R + 1)
tbillq$logExcessRetd = log(tbillq$vwretd + 1) - log(tbillq$t90ret + 1)
tbilla$logExcessRetd = log(tbilla$vwretd + 1) - log(tbilla$b1ret + 1)
tbillq$logExcessRet = log(tbillq$vwretx + 1) - log(tbillq$t90ret + 1)
tbilla$logExcessRet = log(tbilla$vwretx + 1) - log(tbilla$b1ret + 1)
View(tbilla)
#Calculate the log of each dividend return
tbillq$logDiv = log(tbillq$div + 1)
tbillq$logDiv = log(tbillq$div + 1)
View(tbillq)
View(tbilla)
tbilla$logDiv = log(tbilla$div + 1)
plot_ly(tbillq, x = ~quarter, y = ~logDiv, type = "scatter", mode = 'lines')
plot_ly(tbilla, x = ~quarter, y = ~logDiv, type = "scatter", mode = 'lines')
plot_ly(tbillq, x = ~quarter, y = ~logDiv, type = "scatter", mode = 'lines')
View(tbilla)
plot_ly(tbilla, x = ~quarter, y = ~div, type = "scatter", mode = 'lines')
plot_ly(tbilla, x = ~quarter, y = ~logDiv, type = "scatter", mode = 'lines')
plot_ly(tbillq, x = ~quarter, y = ~logDiv, type = "scatter", mode = 'lines')
View(tbilla)
plot_ly(tbillq, x = ~quarter, y = ~logExcessRetd, type = "scatter", mode = 'lines')
plot_ly(tbilla, x = ~year, y = ~logExcessRetd, type = "scatter", mode = 'lines')
plot_ly(tbillq, x = ~quarter, y = ~logExcessRet, type = "scatter", mode = 'lines')
plot_ly(tbilla, x = ~year, y = ~logExcessRet, type = "scatter", mode = 'lines')
linePlot = function(data, x, y){
return(
plot_ly(data, x = ~x, y = ~y, type = "scatter", mode = 'lines')
)
}
linePlot(tbillq, quarter, logDiv)
linePlot(tbillq, tbillq$quarter, tbillq$logDiv)
linePlot(tbillq$quarter, tbillq$logDiv)
linePlot = function(x, y){
return(
plot_ly(x = x, y = y, type = "scatter", mode = 'lines')
)
}
linePlot(tbillq$quarter, tbillq$logDiv)
# TODO: Run ADF Tests for stationarity on each variable
adf.test(tbillq$logDiv)
install.packages('aTSA')
library(aTSA)
# TODO: Run ADF Tests for stationarity on each variable
adf.test(tbillq$logDiv)
# TODO: Run ADF Tests for stationarity on each variable
vars = list(tbillq$logDiv, tbillq$logExcessRetd, tbillq$logExcessRet,
tbilla$logDiv, tbilla$logExcessRetd, tbilla$logExcessRet)
ans = 0
for(i in vars){
print(adf.test(i))
print("Enter 1 to continue or 0 to exit")
ans = readline(prompt="Answer: ")
if(ans == 1){
next
}
else(break)
}
for(i in vars){
print(adf.test(i))
print("Enter 1 to continue or 0 to exit")
ans = readline(prompt="Answer: ")
if(ans == 1){
next
}
else(break)
}
