library(lubridate)
library(parallel)
detectCores()
numcores = detectCores()
cl = makeCluster(numcores)
clusterEvalQ(cl,
library(dplyr)
library(data.table)
library(lubridate)
library(parallel))
clusterEvalQ(cl,install.packages("dplR"))
clusterEvalQ(cl,install.packages("dplyr"))
stopCluster(cl)
numcores = detectCores()
cl = makeCluster(numcores)
clusterEvalQ(cl, 2 + 2)
library(lubridate)
clusterEvalQ(cl, {
library(dplyr)
library(data.table)
library(lubridate)
})
stopCluster(cl)
nyse = c(.05, .15, -.08, .12, -.05)
anaDone = c(.1, .05, -.05, .2, .05)
?lm
regression = lm(anadone ~ nyse)
regression = lm(anaDone ~ nyse)
regression$coefficients
getwd()
A = matrix(c(1,1,1,3,2,1), nrow = 3, ncol = 2, byrow = FALSE)
View(A)
Aprime = t(A)
View(Aprime)
b = c(1.5, 0.5, 0)
inv(A%*%Aprime)%*%Aprime%*%b
library(matlib)
install.packages(matlib)
install.packages("matlib")
library(matlib)
inv(A%*%Aprime)%*%Aprime%*%b
inver = inv(A%*%Aprime)
c = A%*%Aprime
View(c)
c = Aprime%*%A
c = inv(c)
b = Aprime %*% b
c %*% b
View(b)
View(c)
a = matrix(c(1, 3, 1.5, 2, 1, 2, 0.5, 1, 1, 1, 0, 0), nrow = 3, ncol = 4, byrow = TRUE)
View(a)
aprime = t(a)
library(matlib)
inv(a %*% aprime)
a %*% aprime
a = matrix(c(2,1,0,3,1,1,1,1,2,1,0,1,2,1,0), nrow = 3, ncol = 5, byrow = T)
aprime = t(a)
s = c(1,1,1,2,1/3)
inv(a %*% aprime) %*% a %*% s
inv(matrix(c(4,2,4,2,2,2,0,2,4), nrow = 3, ncol = 3, byrow = T))
library(matlib)
a = matrix(c(2, 0, 1, 1, 0, 2), nrow = 3, ncol = 2, byrow = T)
View(a)
aprime = t(a)
View(aprime)
a %*% aprime
install.packages('IRkernel')
update.packages()
IRkernel::installspec(user = FALSE)
library(ggplot2)
library(dplyr)
library(lubridate)
setwd("C:\\Users\\austi\\Documents\\Github_Repos\\Macro_Finance\\Assignment-1\\Data")
crsp = read.csv('crsp_monthly.csv')
tbillAnnual = read.csv('TBill_Annual.csv')
tbillQuarter = read.csv('TBill_Quarterly.csv')
#crsp = transform(crsp, x = as.Date(as.character(x), "%Y%m%d"))
crsp$DATE
View(crsp)
View(crsp)
as_date(crsp$DATE, origin = lubridate::origin)
View(crsp)
crsp = read.csv('crsp_monthly.csv')
crsp$DATE = as.Date.default(crsp$DATE)
crsp$DATE = as.Date.default(crsp['DATE'])
crsp$DATE = as.Date.numeric(crsp$DATE)
crsp.DATE = as.Date.numeric(crsp.DATE)
head(crsp)
start = as.Date('1926-01-30')
crsp$DATE = as.Date(crsp$DATE, origin=start)
head(crsp)
crsp = read.csv('crsp_monthly.csv')
tbillAnnual = read.csv('TBill_Annual.csv')
tbillQuarter = read.csv('TBill_Quarterly.csv')
head(crsp)
crsp$DATE = ymd(crsp$DATE)
head(crsp)
fixDate = function (dateCol){
dateCol = ymd(dateCol)
}
head(tbillAnnual)
head(tbillQuarter)
fixDate = function (data, dateCol){
dateCol = ymd(dateCol)
colnames(data)[1] <- "date"
}
fixDate(crsp, crsp$DATE)
fixDate(tbillAnnual, caldt)
fixDate(crsp, crsp$DATE)
fixDate(tbillAnnual, tbillAnnual$caldt)
fixDate(tbillQuarter, tbillQuarter$caldt)
View(crsp)
View(tbillAnnual)
View(crsp)
View(tbillAnnual)
View(tbillQuarter)
fixDate(tbillAnnual, tbillAnnual$caldt)
fixDate(tbillQuarter, tbillQuarter$caldt)
View(tbillAnnual)
tbillAnnual$caldt = ymd(tbillAnnual$caldt)
View(tbillAnnual)
fixDate = function (data){
data[1] = ymd(data[1])
colnames(data)[1] <- "date"
}
fixDate(crsp, crsp$DATE)
fixDate(crsp)
fixDate(tbillAnnual)
fixDate(tbillQuarter)
crsp[1]
View(tbillQuarter)
tbillQuarter[1]
crsp = read.csv('crsp_monthly.csv')
tbillAnnual = read.csv('TBill_Annual.csv')
tbillQuarter = read.csv('TBill_Quarterly.csv')
colnames(crsp)[1] <- "date"
colnames(tbillAnnual)[1] <- "date"
colnames(tbillQuarter)[1] <- "date"
crsp = read.csv('crsp_monthly.csv')
tbilla = read.csv('TBill_Annual.csv')
tbillq = read.csv('TBill_Quarterly.csv')
colnames(tbilla)[1] <- "date"
colnames(tbillq)[1] <- "date"
crsp$date = ymd(crsp$date)
crsp = read.csv('crsp_monthly.csv')
tbilla = read.csv('TBill_Annual.csv')
tbillq = read.csv('TBill_Quarterly.csv')
colnames(crsp)[1] <- "date"
colnames(tbilla)[1] <- "date"
colnames(tbillq)[1] <- "date"
crsp$date = ymd(crsp$date)
tbilla$date = ymd(tbilla$date)
tbillq$date = ymd(tbillq$date)
crsp = read.csv('crsp_monthly.csv')
tbilla = read.csv('TBill_Annual.csv')
tbillq = read.csv('TBill_Quarterly.csv')
colnames(crsp)[1] <- "date"
colnames(tbilla)[1] <- "date"
colnames(tbillq)[1] <- "date"
crsp$date = ymd(crsp$date)
tbilla$date = ymd(tbilla$date)
tbillq$date = ymd(tbillq$date)
head(crsp)
crsp['div'] = crsp$vwretd - crsp$vwretx
head(crsp)
crsp$div > 0
crsp['divTrue'] = crsp$div > 0
head(crsp)
distinct(crsp$divTrue)
filter(crsp, divTrue = FALSE)
filter(crsp, divTrue = TRUE)
filter(crsp, divTrue == FALSE)
filter(crsp, div < 0)
ggplot(crsp$div)
ggplot(crsp$date, crsp$div)
ggplot(crsp$date, crsp$div, data = crsp)
qplot(crsp$date, crsp$div, data = crsp)
ggplot(crsp, aes(crsp$date, crsp$div))
ggplot(crsp, aes(crsp$date, crsp$div))+ geom_line()
library(plotly)
plot_ly(crsp, x = ~date, y = div, type = "line")
plot_ly(crsp, x = ~date, y = ~div, type = "line")
plot_ly(crsp, x = ~date, y = ~div, type = "scatter")
plot_ly(crsp, x = ~date, y = ~div, type = "scatter", mode(line))
plot_ly(crsp, x = ~date, y = ~div, type = "scatter", mode = 'lines')
crsp = read.csv('crsp_monthly.csv')
tbilla = read.csv('TBill_Annual.csv')
tbillq = read.csv('TBill_Quarterly.csv')
#Fix dates and setup data
##################################
colnames(crsp)[1] <- "date"
colnames(tbilla)[1] <- "date"
colnames(tbillq)[1] <- "date"
crsp$date = ymd(crsp$date)
tbilla$date = ymd(tbilla$date)
tbillq$date = ymd(tbillq$date)
crsp['div'] = crsp$vwretd - crsp$vwretx# Generate Dividend returns
filter(crsp, div < 0)# Check to see if Div returns are all positive
filter(crsp, div < 0) == TRUE# Check to see if Div returns are all positive
filter(crsp, div < 0)# Check to see if Div returns are all positive
length(filter(crsp, div < 0))# Check to see if Div returns are all positive
quarterly <- aggregate(crsp$div, nfrequency=4)
quarterly <- aggregate(crsp$div, nfrequency=4, sum)
quarterly <- aggregate(crsp$div, nfrequency=4, FUN=sum())
quarterly <- aggregate(crsp$div, nfrequency=4)
library(ts)
install.packages('ts')
install.packages('xls')
aggregate(crsp['div'], nfrequency=4)
?aggregate
aggregate(crsp['div'], nfrequency=4, FUN='sum')
aggregate(crsp$div, nfrequency=4, FUN='sum')
divq = aggregate(crsp$div, nfrequency=4, FUN='sum')
divq = aggregate(crsp$div, nfrequency=4, FUN='sum', simplify=TRUE)
divq = aggregate(crsp$div, nfrequency=4, FUN = sum)
divq = aggregate(crsp, nfrequency=4, by=list('div') FUN = sum)
aggregate(crsp, nfrequency=4, by=list('div') FUN = sum)
aggregate(crsp, nfrequency=4, by=list('div'), FUN = sum)
divq = aggregate(crsp, nfrequency=4, by=list('div'), FUN = sum)
divq = aggregate(crsp, nfrequency=4, by=crsp['div'], FUN = sum)
divq = aggregate(crsp, nfrequency=4, by=crsp[c('div')], FUN = sum)
divq = c(crsp$div)
aggregate(divq, nfrequency=4, FUN = sum)
aggregate(divq, nfrequency=4, by=divq, FUN = sum)
?period.sum()
?period
?cumsum
library(zoo)
aggregate.ts(crsp$div, nfrequency = 4)
?aggregate.ts
aggregate.ts(data = crsp, by = list('div'))
aggregate.ts(crsp, by = list('div'))
divq = aggregate.ts(crsp, by = list('div'))
View(divq)
View(divq)
aggregate.ts(crsp, by = list('div'))
divq
head(divq)
divq = aggregate.ts(crsp, by = list('div'), FUN=sum)
head(divq)
divq = crsp$div
divq = aggregate.ts(divq, by = divq, FUN=sum)
head(divq)
View(crsp)
divq = aggregate(divq, by = divq, FUN=sum)
crsp = read.csv('crsp_monthly.csv')
tbilla = read.csv('TBill_Annual.csv')
tbillq = read.csv('TBill_Quarterly.csv')
#Fix dates and setup data
##################################
colnames(crsp)[1] <- "date"
colnames(tbilla)[1] <- "date"
colnames(tbillq)[1] <- "date"
crsp$date = ymd(crsp$date)
tbilla$date = ymd(tbilla$date)
tbillq$date = ymd(tbillq$date)
crsp['div'] = crsp$vwretd - crsp$vwretx# Generate Dividend returns
filter(crsp, div < 0)# Check to see if Div returns are all positive
divq = crsp$div
divq = aggregate(divq, by = divq, FUN=sum)
divq = aggregate(divq, by = list(divq), FUN=sum)
divq = aggregate(divq, by = list(divq), FUN=sum)
View(divq)
crsp = read.csv('crsp_monthly.csv')
tbilla = read.csv('TBill_Annual.csv')
tbillq = read.csv('TBill_Quarterly.csv')
#Fix dates and setup data
##################################
colnames(crsp)[1] <- "date"
colnames(tbilla)[1] <- "date"
colnames(tbillq)[1] <- "date"
crsp$date = ymd(crsp$date)
tbilla$date = ymd(tbilla$date)
tbillq$date = ymd(tbillq$date)
crsp['div'] = crsp$vwretd - crsp$vwretx# Generate Dividend returns
filter(crsp, div < 0)# Check to see if Div returns are all positive
divq = crsp$div
divq = aggregate(divq, by = list(divq), FUN=sum)
head(divq)
View(crsp)
sum(crsp$div[1:4])
crsp = read.csv('crsp_monthly.csv')
tbilla = read.csv('TBill_Annual.csv')
tbillq = read.csv('TBill_Quarterly.csv')
#Fix dates and setup data
##################################
colnames(crsp)[1] <- "date"
colnames(tbilla)[1] <- "date"
colnames(tbillq)[1] <- "date"
crsp$date = ymd(crsp$date)
tbilla$date = ymd(tbilla$date)
tbillq$date = ymd(tbillq$date)
crsp['div'] = crsp$vwretd - crsp$vwretx# Generate Dividend returns
filter(crsp, div < 0)# Check to see if Div returns are all positive
divq = crsp$div
divq = cumsum(divq)[seq(4,length(divq),by=4)]
crsp$quarterYear <- as.Date(as.yearqtr(crsp$date))
crsp$quarterYear <- as.Date(as.yearqtr(crsp$date))
View(crsp)
crspq = crsp %>%
group_by(quarterYear) %>%
summarise_each(funs = sum)
?summarise_at
crspq = crsp %>%
group_by(quarterYear) %>%
summarise(sum)
crspq = crsp %>%
group_by(quarterYear) %>%
summarise(crsp$vwretd, crsp$vwretx, crsp$div)
crspq = crsp %>%
group_by(quarterYear) %>%
summarise(funs(sum))
View(crspq)
head(crsp)
crspq = crsp %>%
group_by(quarterYear) %>%
summarise(ret = sum(vwretx), retd = sum(vwretd), div = sum(div))
View(crsp)
View(crspq)
View(crsp)
View(crspq)
plot_ly(crspq, x = ~quarterYear, y = ~div, type = "scatter", mode = 'lines')
?`lubridate-package`
crsp$yearly = year(crsp$date)
View(crsp)
crspa = crsp %>%
group_by(yearly) %>%
summarise(ret = sum(vwretx), retd = sum(vwretd), div = sum(div))
plot_ly(crspa, x = ~yearly, y = ~div, type = "scatter", mode = 'lines')
View(crspa)
