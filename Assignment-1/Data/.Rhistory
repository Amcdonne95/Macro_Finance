library(lubridate)
library(parallel)
detectCores()
numcores = detectCores()
cl = makeCluster(numcores)
clusterEvalQ(cl,
library(dplyr)
library(data.table)
library(lubridate)
library(parallel))
clusterEvalQ(cl,install.packages("dplR"))
clusterEvalQ(cl,install.packages("dplyr"))
stopCluster(cl)
numcores = detectCores()
cl = makeCluster(numcores)
clusterEvalQ(cl, 2 + 2)
library(lubridate)
clusterEvalQ(cl, {
library(dplyr)
library(data.table)
library(lubridate)
})
stopCluster(cl)
nyse = c(.05, .15, -.08, .12, -.05)
anaDone = c(.1, .05, -.05, .2, .05)
?lm
regression = lm(anadone ~ nyse)
regression = lm(anaDone ~ nyse)
regression$coefficients
getwd()
A = matrix(c(1,1,1,3,2,1), nrow = 3, ncol = 2, byrow = FALSE)
View(A)
Aprime = t(A)
View(Aprime)
b = c(1.5, 0.5, 0)
inv(A%*%Aprime)%*%Aprime%*%b
library(matlib)
install.packages(matlib)
install.packages("matlib")
library(matlib)
inv(A%*%Aprime)%*%Aprime%*%b
inver = inv(A%*%Aprime)
c = A%*%Aprime
View(c)
c = Aprime%*%A
c = inv(c)
b = Aprime %*% b
c %*% b
View(b)
View(c)
a = matrix(c(1, 3, 1.5, 2, 1, 2, 0.5, 1, 1, 1, 0, 0), nrow = 3, ncol = 4, byrow = TRUE)
View(a)
aprime = t(a)
library(matlib)
inv(a %*% aprime)
a %*% aprime
a = matrix(c(2,1,0,3,1,1,1,1,2,1,0,1,2,1,0), nrow = 3, ncol = 5, byrow = T)
aprime = t(a)
s = c(1,1,1,2,1/3)
inv(a %*% aprime) %*% a %*% s
inv(matrix(c(4,2,4,2,2,2,0,2,4), nrow = 3, ncol = 3, byrow = T))
library(matlib)
a = matrix(c(2, 0, 1, 1, 0, 2), nrow = 3, ncol = 2, byrow = T)
View(a)
aprime = t(a)
View(aprime)
a %*% aprime
install.packages('IRkernel')
update.packages()
IRkernel::installspec(user = FALSE)
library(ggplot2)
library(dplyr)
library(zoo)
library(lubridate)
library(plotly)
library(ts)
library(shiny)
setwd("C:\\Users\\austi\\Documents\\Github_Repos\\Macro_Finance\\Assignment-1\\Data")
crsp = read.csv('crsp_monthly.csv')
tbilla = read.csv('TBill_Annual.csv')
tbillq = read.csv('TBill_Quarterly.csv')
#Fix dates and setup data
##################################
colnames(crsp)[1] <- "date"
colnames(tbilla)[1] <- "date"
colnames(tbillq)[1] <- "date"
crsp$date = ymd(crsp$date)
tbilla$date = ymd(tbilla$date)
tbillq$date = ymd(tbillq$date)
tbilla$year = year(tbilla$date)
tbillq$quarter = as.Date(as.yearqtr(tbillq$date))
#################################
crsp['div'] = crsp$vwretd - crsp$vwretx# Generate Dividend returns
filter(crsp, div < 0)# Check to see if Div returns are all positive
#plot_ly(crsp, x = ~date, y = ~div, type = "scatter", mode = 'lines')#plot initial dividends
crsp$quarter = as.Date(as.yearqtr(crsp$date))
crsp$year = year(crsp$date)
crspq = crsp %>%
group_by(quarter) %>%
summarise(vwretx = Return.cumulative(vwretx, geometric = TRUE),
vwretd = Return.cumulative(vwretd, geometric = TRUE),
div = Return.cumulative(div, geometric = TRUE))
?Return.cumulative
install.packages('PerformanceAnalytics')
library(PerformanceAnalytics)
crspq = crsp %>%
group_by(quarter) %>%
summarise(vwretx = Return.cumulative(vwretx, geometric = TRUE),
vwretd = Return.cumulative(vwretd, geometric = TRUE),
div = Return.cumulative(div, geometric = TRUE))
crspa = crsp %>%
group_by(yearly) %>%
summarise(vwretx = Return.cumulative(vwretx, geometric = TRUE),
vwretd = Return.cumulative(vwretd, geometric = TRUE),
div = Return.cumulative(div, geometric = TRUE))
crspa = crsp %>%
group_by(year) %>%
summarise(vwretx = Return.cumulative(vwretx, geometric = TRUE),
vwretd = Return.cumulative(vwretd, geometric = TRUE),
div = Return.cumulative(div, geometric = TRUE))
View(crsp)
View(crspa)
View(crspq)
View(tbilla)
View(tbillq)
View(crspq)
tbillq = left_join(tbillq, crspq, by = "quarter")
View(tbillq)
View(crspq)
View(tbillq)
crsp = read.csv('crsp_monthly.csv')
tbilla = read.csv('TBill_Annual.csv')
tbillq = read.csv('TBill_Quarterly.csv')
#Fix dates and setup data
##################################
colnames(crsp)[1] <- "date"
colnames(tbilla)[1] <- "date"
colnames(tbillq)[1] <- "date"
crsp$date = ymd(crsp$date)
tbilla$date = ymd(tbilla$date)
tbillq$date = ymd(tbillq$date)
tbilla$year = year(tbilla$date)
tbillq$quarter = as.Date(as.yearqtr(tbillq$date))
crsp['div'] = crsp$vwretd - crsp$vwretx# Generate Dividend returns
filter(crsp, div < 0)# Check to see if Div returns are all positive
crsp$quarter = as.Date(as.yearqtr(crsp$date))
crsp$year = year(crsp$date)
View(crsp)
View(crspa)
View(tbilla)
View(crspq)
View(tbillq)
crsp = read.csv('crsp_monthly.csv')
tbilla = read.csv('TBill_Annual.csv')
tbillq = read.csv('TBill_Quarterly.csv')
#Fix dates and setup data
##################################
colnames(crsp)[1] <- "date"
colnames(tbilla)[1] <- "date"
colnames(tbillq)[1] <- "date"
crsp$date = ymd(crsp$date)
tbilla$date = ymd(tbilla$date)
tbillq$date = ymd(tbillq$date)
tbilla$year = year(tbilla$date)
tbillq$quarter = as.Date(as.yearqtr(tbillq$date))
#################################
crsp['div'] = crsp$vwretd - crsp$vwretx# Generate Dividend returns
filter(crsp, div < 0)# Check to see if Div returns are all positive
#plot_ly(crsp, x = ~date, y = ~div, type = "scatter", mode = 'lines')#plot initial dividends
crsp$quarter = as.Date(as.yearqtr(crsp$date))
crsp$year = year(crsp$date)
crspq = crsp %>%
group_by(quarter) %>%
summarise(vwretx = Return.cumulative(vwretx, geometric = TRUE),
vwretd = Return.cumulative(vwretd, geometric = TRUE),
div = Return.cumulative(div, geometric = TRUE))
crspa = crsp %>%
group_by(year) %>%
summarise(vwretx = Return.cumulative(vwretx, geometric = TRUE),
vwretd = Return.cumulative(vwretd, geometric = TRUE),
div = Return.cumulative(div, geometric = TRUE))
colnames(crspq)[1] <- "date"
colnames(crspa)[1] <- "date"
tbillq = left_join(tbillq, crspq, by = "quarter")
crsp = read.csv('crsp_monthly.csv')
tbilla = read.csv('TBill_Annual.csv')
tbillq = read.csv('TBill_Quarterly.csv')
#Fix dates and setup data
##################################
colnames(crsp)[1] <- "date"
colnames(tbilla)[1] <- "date"
colnames(tbillq)[1] <- "date"
crsp$date = ymd(crsp$date)
tbilla$date = ymd(tbilla$date)
tbillq$date = ymd(tbillq$date)
tbilla$year = year(tbilla$date)
tbillq$quarter = as.Date(as.yearqtr(tbillq$date))
crsp['div'] = crsp$vwretd - crsp$vwretx# Generate Dividend returns
filter(crsp, div < 0)# Check to see if Div returns are all positive
crsp$quarter = as.Date(as.yearqtr(crsp$date))
crsp$year = year(crsp$date)
crspq = crsp %>%
group_by(quarter) %>%
summarise(vwretx = Return.cumulative(vwretx, geometric = TRUE),
vwretd = Return.cumulative(vwretd, geometric = TRUE),
div = Return.cumulative(div, geometric = TRUE))
crspa = crsp %>%
group_by(year) %>%
summarise(vwretx = Return.cumulative(vwretx, geometric = TRUE),
vwretd = Return.cumulative(vwretd, geometric = TRUE),
div = Return.cumulative(div, geometric = TRUE))
colnames(crspq)[1] <- "date"
colnames(crspa)[1] <- "date"
tbillq = left_join(tbillq, crspq, by = "quarter")
View(crspq)
View(crspq)
crsp = read.csv('crsp_monthly.csv')
tbilla = read.csv('TBill_Annual.csv')
tbillq = read.csv('TBill_Quarterly.csv')
#Fix dates and setup data
##################################
colnames(crsp)[1] <- "date"
colnames(tbilla)[1] <- "date"
colnames(tbillq)[1] <- "date"
crsp$date = ymd(crsp$date)
tbilla$date = ymd(tbilla$date)
tbillq$date = ymd(tbillq$date)
tbilla$year = year(tbilla$date)
tbillq$quarter = as.Date(as.yearqtr(tbillq$date))
#################################
crsp['div'] = crsp$vwretd - crsp$vwretx# Generate Dividend returns
filter(crsp, div < 0)# Check to see if Div returns are all positive
#plot_ly(crsp, x = ~date, y = ~div, type = "scatter", mode = 'lines')#plot initial dividends
crsp$quarter = as.Date(as.yearqtr(crsp$date))
crsp$year = year(crsp$date)
crspq = crsp %>%
group_by(quarter) %>%
summarise(vwretx = Return.cumulative(vwretx, geometric = TRUE),
vwretd = Return.cumulative(vwretd, geometric = TRUE),
div = Return.cumulative(div, geometric = TRUE))
crspa = crsp %>%
group_by(year) %>%
summarise(vwretx = Return.cumulative(vwretx, geometric = TRUE),
vwretd = Return.cumulative(vwretd, geometric = TRUE),
div = Return.cumulative(div, geometric = TRUE))
#plot_ly(crspq, x = ~quarter, y = ~div, type = "scatter", mode = 'lines')
#plot_ly(crspa, x = ~yearly, y = ~div, type = "scatter", mode = 'lines')
tbillq = left_join(tbillq, crspq, by = "quarter")
tbilla = left_join(tbilla, crspa, by = 'year')
View(tbilla)
View(tbillq)
View(tbilla)
?ln
tbillq$logExcessRetd = log(tbillq$vwretd - tbillq$t90ret)
View(tbillq)
tbillq$excessRetd = tbillq$vwretd - tbillq$t90ret
View(tbillq)
tbilla$excessRetd = tbilla$vwretd - tbilla$b1ret
View(tbilla)
generate_data = function(data, period){
return(
data %>%
group_by(period) %>%
summarise(vwretx = Return.cumulative(vwretx, geometric = TRUE),
vwretd = Return.cumulative(vwretd, geometric = TRUE),
div = Return.cumulative(div, geometric = TRUE))
)
}
