library(dplyr)
library(data.table)
library(lubridate)
})
stopCluster(cl)
nyse = c(.05, .15, -.08, .12, -.05)
anaDone = c(.1, .05, -.05, .2, .05)
?lm
regression = lm(anadone ~ nyse)
regression = lm(anaDone ~ nyse)
regression$coefficients
getwd()
A = matrix(c(1,1,1,3,2,1), nrow = 3, ncol = 2, byrow = FALSE)
View(A)
Aprime = t(A)
View(Aprime)
b = c(1.5, 0.5, 0)
inv(A%*%Aprime)%*%Aprime%*%b
library(matlib)
install.packages(matlib)
install.packages("matlib")
library(matlib)
inv(A%*%Aprime)%*%Aprime%*%b
inver = inv(A%*%Aprime)
c = A%*%Aprime
View(c)
c = Aprime%*%A
c = inv(c)
b = Aprime %*% b
c %*% b
View(b)
View(c)
a = matrix(c(1, 3, 1.5, 2, 1, 2, 0.5, 1, 1, 1, 0, 0), nrow = 3, ncol = 4, byrow = TRUE)
View(a)
aprime = t(a)
library(matlib)
inv(a %*% aprime)
a %*% aprime
a = matrix(c(2,1,0,3,1,1,1,1,2,1,0,1,2,1,0), nrow = 3, ncol = 5, byrow = T)
aprime = t(a)
s = c(1,1,1,2,1/3)
inv(a %*% aprime) %*% a %*% s
inv(matrix(c(4,2,4,2,2,2,0,2,4), nrow = 3, ncol = 3, byrow = T))
library(matlib)
a = matrix(c(2, 0, 1, 1, 0, 2), nrow = 3, ncol = 2, byrow = T)
View(a)
aprime = t(a)
View(aprime)
a %*% aprime
install.packages('IRkernel')
update.packages()
IRkernel::installspec(user = FALSE)
library(ggplot2)
library(dplyr)
library(zoo)
library(lubridate)
library(plotly)
library(ts)
library(shiny)
library(PerformanceAnalytics)
#library(aTSA)
library(tseries)
setwd("C:\\Users\\austi\\Documents\\Github_Repos\\Macro_Finance\\Assignment-1\\Data")
# Helper Functions
############################################################
# Shortcut for making line charts
linePlot = function(x, y, xlabel, ylabel, title){
return(
plot_ly(x = x, y = y, type = "scatter", mode = 'lines') %>%
layout(
title = toString(title),
xaxis = list(title = toString(xlabel)),
yaxis = list(title = toString(ylabel))
)
)
}
# Saves all of the plots names with 'plot(number)' to the WD
saveAllPlots = function(numPlots){
for(i in seq.int(numPlots)){
htmlwidgets::saveWidget(eval(parse(paste('plot', i, sep =''))),
paste('plot', i, '.html', sep = ''))
}
}
# Returns the results from variously lagged linear regressions
regLaggedDiv = function(maxLag, dependent, independent){
coeffMatrix = list()
rSquared = list()
adjRsquared = list()
for(i in seq.int(maxLag)){
independent = lag(independent, k=i)
if(i == 1){
independent = independent[-i]
dependent = dependent[-i]
}
else{
independent = independent[-(1:i)]
dependent = dependent[-(1:i)]
}
coeffMatrix[[i]] = summary(lm(dependent ~ independent))$coefficients
rSquared[[i]] = summary(lm(dependent ~ independent))$r.squared
adjRsquared[[i]] = summary(lm(dependent ~ independent))$adj.r.squared
}
return(list(coeffMatrix, rSquared, adjRsquared))
}
###########################################################
crsp = read.csv('crsp_monthly.csv')
tbilla = read.csv('TBill_Annual.csv')
tbillq = read.csv('TBill_Quarterly.csv')
#Fix dates and setup data
##################################
colnames(crsp)[1] <- "date"
colnames(tbilla)[1] <- "date"
colnames(tbillq)[1] <- "date"
crsp$date = ymd(crsp$date)
tbilla$date = ymd(tbilla$date)
tbillq$date = ymd(tbillq$date)
tbilla$year = year(tbilla$date)
tbillq$quarter = as.Date(as.yearqtr(tbillq$date))
crsp$quarter = as.Date(as.yearqtr(crsp$date))
crsp$year = year(crsp$date)
#################################
# Generate Dividend returns
crsp['div'] = crsp$vwretd - crsp$vwretx
# Check to see if Div returns are all positive
filter(crsp, div < 0)
# Generate quarterly geometric cumulative sum
crspq = crsp %>%
group_by(quarter) %>%
summarise(vwretx = Return.cumulative(vwretx, geometric = TRUE),
vwretd = Return.cumulative(vwretd, geometric = TRUE),
div = Return.cumulative(div, geometric = TRUE))
# Generate yearlt geometric cumulative sums
crspa = crsp %>%
group_by(year) %>%
summarise(vwretx = Return.cumulative(vwretx, geometric = TRUE),
vwretd = Return.cumulative(vwretd, geometric = TRUE),
div = Return.cumulative(div, geometric = TRUE))
# Join matching data based on the quarter and year dates
tbillq = left_join(tbillq, crspq, by = 'quarter')
tbilla = left_join(tbilla, crspa, by = 'year')
# Convert Simple returns (calculated by CRSP) to Log Returns: r = log(R + 1)
# Calculate the excess dividend inclusive index log return
tbillq$logExcessRetd = log(tbillq$vwretd + 1) - log(tbillq$t90ret + 1)
tbilla$logExcessRetd = log(tbilla$vwretd + 1) - log(tbilla$b1ret + 1)
# Calculate the excess dividend exclusive index log return
tbillq$logExcessRet = log(tbillq$vwretx + 1) - log(tbillq$t90ret + 1)
tbilla$logExcessRet = log(tbilla$vwretx + 1) - log(tbilla$b1ret + 1)
#Calculate the log of each dividend return
tbillq$logDiv = log(tbillq$div + 1)
tbilla$logDiv = log(tbilla$div + 1)
# INITIAL PLOTTING
############################################################
# PLotting Q & Y Log Div: Does not look stationary
plot1 = linePlot(tbillq$quarter, tbillq$logDiv,
'Date', 'Log Dividend Return', 'Quarterly Dividend Log Returns')
plot2 = linePlot(tbilla$year, tbilla$logDiv,
'Date', 'Log Dividend Return', 'Annual Dividend Log Returns')
densityq = density(tbillq$logDiv)
plot3 = plot_ly(x = ~densityq$x, y = ~densityq$y,type = 'scatter', mode = 'lines', fill = 'tozeroy') %>%
layout(
title = 'Quarterly Dividend Log Return Denisty',
xaxis = list(title = 'Log Dividend Returns: Quarterly'),
yaxis = list(title = 'Density')
)
# Plotting Log Excess Return, Div Inclusive, Q & Y: Both look more stationary
plot4 = linePlot(tbillq$quarter, tbillq$logExcessRetd)
plot5 = linePlot(tbilla$year, tbilla$logExcessRetd)
# Plotting Log Excess Return, Div Exclusive, Q & Y: Both look more stationary
plot6 = linePlot(tbillq$quarter, tbillq$logExcessRet)
plot7 = linePlot(tbilla$year, tbilla$logExcessRet)
#############################################################
# Remove any NaN's
tbillq = na.omit(tbillq)
tbilla = na.omit(tbilla)
# Runs ADF Tests for stationarity on each variable
vars = list(tbillq$logDiv, tbillq$logExcessRetd, tbillq$logExcessRet,
tbilla$logDiv, tbilla$logExcessRetd, tbilla$logExcessRet)
# ADF Tests show that Log Div both Q & Y are not stationary
ans = 1
for(i in vars){
if(ans == 1){
print(adf.test(i))
print("Enter 1 to continue or 0 to exit")
ans = readline(prompt="Answer: ")
next
}
else(break)
}
plot8 = plot_ly(y = diff(tbillq$logDiv, differences = 1, lag = 1), type = "scatter", mode = 'lines')
plot9 = plot_ly(y = diff(tbilla$logDiv, differences = 1, lag = 1), type = "scatter", mode = 'lines')
# Shows that the differencing of the log return dividends are stationary
adf.test(diff(tbillq$logDiv, differences = 1, lag = 1))
adf.test(diff(tbilla$logDiv, differences = 1, lag = 1))
# Build the LM for across the whole period for each Q & Y across multiple lags for Divs
fullPeriodRegq = regLaggedDiv(6, tbillq$logExcessRetd, tbillq$logDiv)
fullPeriodRega = regLaggedDiv(6, tbilla$logExcessRetd, tbilla$logDiv)
rollingReg = function(x, maxLag){
adjRsquared = list()
for(i in seq.int(maxLag)){
independent = lag(x$logDiv, k=i)
if(i == 1){
independent = independent[-i]
dependent = x$logExcessRetd[-i]
}
else{
independent = independent[-(1:i)]
dependent = x$logExcessRetd[-(1:i)]
}
adjRsquared[[i]] = summary(lm(dependent ~ independent))$adj.r.squared
}
return(adjRsquared)
}
rollapply(tbilla, width = 15, FUN = function(x) rollingReg(x))
rollapply(tbilla, width = 15, FUN = function(x) rollingReg(x, maxLag = 3))
rollapply(tbilla, width = 15, FUN = rollingReg(tbilla, maxLag = 3))
rollapply(tbilla, width = 15, FUN = function(tbilla) rollingReg(tbilla, maxLag = 3))
View(tbilla)
rollapply(tbilla, width = 15, FUN = function(x) rollingReg(x, maxLag = 3))
rollingReg = function(x, maxLag){
adjRsquared = list()
for(i in seq.int(maxLag)){
independent = lag(x[,1], k=i)
if(i == 1){
independent = independent[-i]
dependent = x$logExcessRetd[-i]
}
else{
independent = independent[-(1:i)]
dependent = x$logExcessRetd[-(1:i)]
}
adjRsquared[[i]] = summary(lm(dependent ~ independent))$adj.r.squared
}
return(adjRsquared)
}
rollapply(tbilla, width = 15, FUN = function(x) rollingReg(x, maxLag = 3))
rollReg = function(data){
print('hi')
}
rollapply(data = tbilla, width = 15, FUN = rollReg)
rollReg = function(data){
print('hi')
}
rollapply(data = tbilla, width = 15, FUN = rollReg(data = data))
rollapply(data = tbilla, width = 15, FUN = rollReg(data))
rollReg = function(data){
print('hi')
}
rollapply(data = tbilla, width = 15, FUN = rollReg(data))
rollReg = function(data, maxLag){
print('hi')
}
rollapply(data = tbilla, width = 15, FUN = rollReg(maxLag = 2))
rollapply(data = tbilla, width = 15, FUN = rollReg)
rollReg = function(data, maxLag){
return(data$logDiv[-1])
}
rollapply(data = tbilla, width = 15, FUN = rollReg)
return(data[-1])
rollReg = function(data){
return(data[-1])
}
rollapply(data = tbilla, width = 15, FUN = rollReg)
rollReg = function(data){
return(data[,-1])
}
rollapply(data = tbilla, width = 15, FUN = rollReg)
rollReg = function(data){
return(data)
}
rollapply(data = tbilla, width = 15, FUN = rollReg)
View(tbilla)
rollapply(data = tbilla$logDiv, width = 15, FUN = rollReg)
rollReg = function(z){
data = as.data.frame(z)
return(data)
}
rollapply(data = tbilla$logDiv, width = 15, FUN = rollReg)
rollapply(data = tbilla, width = 15, FUN = rollReg)
rollapply(data = tbilla, width = 15,
FUN = function(z) coef(lm(logExcessRetd ~ logDiv, data = as.data.frame(z))))
rollapply(data = tbilla, width = 15,
FUN = function(z) coef(lm(tbilla$logExcessRetd ~ tbilla$logDiv, data = as.data.frame(z))))
rollapply(data = tbilla, width = 15,
FUN = function(z) summary(lm(tbilla$logExcessRetd ~ tbilla$logDiv, data = as.data.frame(z))))
rollapply(data = tbilla, width = 15,
FUN = function(z) r.squared(lm(tbilla$logExcessRetd ~ tbilla$logDiv, data = as.data.frame(z))))
rollReg = function(z){
data = as.data.frame(z)
return(data)
}
rollapply(data = tbilla, width = 15,
FUN = rollReg(z))
rollapply(data = tbilla, width = 15,
FUN = rollReg)
rollapply(data = tbilla, width = 15,
FUN = rollReg(tbilla))
rollReg = function(z){
data = as.data.frame(z)
return(data)
}
rollapply(data = tbilla, width = 15,
FUN = rollReg(tbilla))
rollReg = function(data){
z = as.data.frame(data)
return(z)
}
rollapply(data = tbilla, width = 15,
FUN = rollReg(data))
rollReg = function(data){
return(data)
}
rollapply(data = tbilla, width = 15,
FUN = rollReg(data))
View(tbilla)
rollReg = function(data){
return(data)
}
rollapply(data = tbilla, width = 15,
FUN = rollReg(data$logDiv))
rollapply(data = tbilla, width = 15, FUN = rollReg(data$logDiv))
rollReg = function(data){
return(head(data))
}
rollapply(data = tbilla, width = 15, FUN = rollReg(data))
rollapply(data = tbilla, width = 15, FUN = rollReg)
View(tbilla)
rollReg = function(dep, indep){
return(head(dep))
}
rollapply(data = list(tbilla$logExcessRetd, tbilla$logDiv),
width = 15, FUN = rollReg(data[1], data[2]))
rollapply(data = list(tbilla$logExcessRetd, tbilla$logDiv), width = 15, FUN = rollReg(data[1], data[2]))
rollReg = function(data){
return(data[,8])
}
rollapply(data = tbilla, width = 15, FUN = rollReg)
rollapply(data = tbilla, width = 15, FUN = rollReg(data))
rollReg = function(data){
return(data)
}
rollapply(data = tbilla, width = 15, FUN = rollReg(data))
rollapply(data = tbilla, width = 15, FUN = rollReg)
rollingWindow = function(dependent, independent, window){
adjRsquared = list()
periodLength = nrow(dependent)
for(j in seq.int(periodLength - window)){
dependent = dependent[j:(j + window -1)]
independent = independent[j:(j + window -1)]
adjRsquared[[j]] = summary(lm(dependent ~ independent))$adj.r.squared
}
return(adjRsquared)
}
rollingRsquared = rollingWindow(tbilla$logExcessRetd, tbilla$logDiv, window = 15)
rollingWindow = function(dependent, independent, window){
adjRsquared = list()
periodLength = nrow(dependent)
for(j in seq.int(periodLength - window)){
dependent = dependent[j:(j + window -1)]
independent = independent[j:(j + window -1)]
adjRsquared[[j]] = summary(lm(dependent ~ independent))$adj.r.squared
}
return(adjRsquared)
}
rollingRsquared = rollingWindow(tbilla$logExcessRetd, tbilla$logDiv, window = 15)
rollingWindow = function(dependent, independent, window){
adjRsquared = list()
periodLength = nrow(dependent)
print(periodLength)
for(j in seq.int(periodLength - window)){
dependent = dependent[j:(j + window -1)]
independent = independent[j:(j + window -1)]
adjRsquared[j] = summary(lm(dependent ~ independent))$adj.r.squared
}
return(adjRsquared)
}
rollingRsquared = rollingWindow(tbilla$logExcessRetd, tbilla$logDiv, window = 15)
View(tbilla)
rollingWindow = function(dependent, independent, window){
adjRsquared = list()
periodLength = nrow(dependent)
print(periodLength)
for(j in seq.int((periodLength - window))){
dependent = dependent[j:(j + window -1)]
independent = independent[j:(j + window -1)]
adjRsquared[j] = summary(lm(dependent ~ independent))$adj.r.squared
}
return(adjRsquared)
}
rollingRsquared = rollingWindow(tbilla$logExcessRetd, tbilla$logDiv, window = 15)
rollingWindow = function(dependent, independent, window){
adjRsquared = list()
periodLength = length(dependent)
print(periodLength)
for(j in seq.int((periodLength - window))){
dependent = dependent[j:(j + window -1)]
independent = independent[j:(j + window -1)]
adjRsquared[j] = summary(lm(dependent ~ independent))$adj.r.squared
}
return(adjRsquared)
}
rollingRsquared = rollingWindow(tbilla$logExcessRetd, tbilla$logDiv, window = 15)
View(tbilla)
rollingWindow = function(dependent, independent, window){
adjRsquared = list()
periodLength = length(dependent)
print(periodLength)
for(j in seq.int((periodLength - window))){
print(j)
dependent = dependent[j:(j + window -1)]
independent = independent[j:(j + window -1)]
adjRsquared[j] = summary(lm(dependent ~ independent))$adj.r.squared
}
return(adjRsquared)
}
rollingRsquared = rollingWindow(tbilla$logExcessRetd, tbilla$logDiv, window = 15)
tbilla$logExcessRetd[1:15]
rollingWindow = function(dependent, independent, window){
adjRsquared = list()
periodLength = length(dependent)
print(periodLength)
for(j in seq.int((periodLength - window))){
print(j)
dependent = dependent[j:(j + window -1)]
independent = independent[j:(j + window -1)]
print(dependent)
adjRsquared[j] = summary(lm(dependent ~ independent))$adj.r.squared
}
return(adjRsquared)
}
rollingRsquared = rollingWindow(tbilla$logExcessRetd, tbilla$logDiv, window = 15)
rollingWindow = function(dependent, independent, window){
adjRsquared = list()
periodLength = length(dependent)
for(j in seq.int((periodLength - window))){
print(j)
y = dependent[j:(j + window -1)]
x = independent[j:(j + window -1)]
adjRsquared[j] = summary(lm(y ~ x))$adj.r.squared
}
return(adjRsquared)
}
rollingRsquared = rollingWindow(tbilla$logExcessRetd, tbilla$logDiv, window = 15)
View(rollingRsquared)
plot_ly(rollingRsquared, type = "scatter", mode = 'lines')
plot_ly(data = rollingRsquared, type = "scatter", mode = 'lines')
plot_ly(as.dataframe(rollingRsquared), type = "scatter", mode = 'lines')
plot_ly(as.data.frame(rollingRsquared), type = "scatter", mode = 'lines')
View(rollingRsquared)
rollingWindow = function(dependent, independent, window){
adjRsquared = c()
periodLength = length(dependent)
for(j in seq.int((periodLength - window))){
y = dependent[j:(j + window -1)]
x = independent[j:(j + window -1)]
adjRsquared[j] = summary(lm(y ~ x))$adj.r.squared
}
return(adjRsquared)
}
rollingRsquared = rollingWindow(tbilla$logExcessRetd, tbilla$logDiv, window = 15)
plot_ly(as.data.frame(rollingRsquared), type = "scatter", mode = 'lines')
as.data.frame(rollingRsquared)
rollingWindow = function(dependent, independent, window){
adjRsquared = c()
periodLength = length(dependent)
for(j in seq.int((periodLength - window))){
y = dependent[j:(j + window -1)]
x = independent[j:(j + window -1)]
adjRsquared[j] = summary(lm(y ~ x))$adj.r.squared
}
return(as.data.frame(adjRsquared))
}
rollingRsquared = rollingWindow(tbilla$logExcessRetd, tbilla$logDiv, window = 15)
plot_ly(rollingRsquared, type = "scatter", mode = 'lines')
View(rollingRsquared)
plot_ly(rollingRsquared, type = "scatter")
plot_ly(rollingRsquared)
plot_ly(x = rollingRsquared)
plot(rollingRsquared)
rollingRsquared.index
rollingRsquared.row
row(rollingRsquared)
plot_ly(y = rollingRsquared$adjRsquared, y = row(rollingRsquared))
plot_ly(y = rollingRsquared$adjRsquared, y = row(rollingRsquared),
type = "scatter", mode = 'lines')
plot_ly(y = rollingRsquared$adjRsquared, y = row(rollingRsquared), type = "scatter", mode = 'lines') %>%
layout(
title = 'Adjusted R Squares: No Lagged Independent Variables',
)
plot_ly(y = rollingRsquared$adjRsquared, y = row(rollingRsquared), type = "scatter", mode = 'lines') %>%
layout(
title = list('Adjusted R Squares: No Lagged Independent Variables')
)
plot_ly(y = rollingRsquared$adjRsquared, y = row(rollingRsquared), type = "scatter", mode = 'lines') %>%
layout(
title = 'Adjusted R Squares: No Lagged Independent Variables'
)
rollingRsquaredx = rollingWindow(tbilla$logExcessRetx, tbilla$logDiv, window = 15)
rollingRsquaredx = rollingWindow(tbilla$logExcessRet, tbilla$logDiv, window = 15)
plot_ly(y = rollingRsquaredx$adjRsquared, y = row(rollingRsquaredx), type = "scatter", mode = 'lines') %>%
layout(
title = 'Adjusted R Squares: No Lagged Independent Variables'
)
rollingRsquaredd = rollingWindow(tbilla$logExcessRetd, tbilla$logDiv, window = 15)
plot_ly(y = rollingRsquaredd$adjRsquared, y = row(rollingRsquaredd), type = "scatter", mode = 'lines') %>%
layout(
title = 'Adjusted R Squares: No Lagged Independent Variables'
)
rollingRsquaredx = rollingWindow(tbilla$logExcessRet, tbilla$logDiv, window = 15)
plot_ly(y = rollingRsquaredx$adjRsquared, y = row(rollingRsquaredx), type = "scatter", mode = 'lines') %>%
layout(
title = 'Adjusted R Squares: No Lagged Independent Variables'
)
